{"version":3,"sources":["component/Navbar.js","component/Textform.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","Textform","useState","text","setText","style","color","heading","backgroundColor","value","placeholder","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","map","currentValue","slice","join","document","getElementById","select","navigator","clipboard","writeText","length","trimEnd","Alert","alert","class","word","lower","charAt","capatilize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2b26d120.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">\r\n                    {props.title}\r\n                </a>\r\n                <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    data-bs-toggle=\"collapse\"\r\n                    data-bs-target=\"#navbarSupportedContent\"\r\n                    aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\"\r\n                    aria-label=\"Toggle navigation\"\r\n                >\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                                Home\r\n                            </a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/about\">\r\n                                {props.aboutText}\r\n                            </a>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input\r\n                            className=\"form-control me-2\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search\"\r\n                            aria-label=\"Search\"\r\n                        />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                            Search\r\n                        </button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode === 'dark'?'light':'dark'}Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n};\r\n\r\n// Specifies the default values for props:\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n};\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n    // Upper Case\r\n\r\n    const handleUpClick = () =>{\r\n        // console.log(\"Uppercase was click: \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to Upper Case!','success');\r\n    }\r\n\r\n    // Lower Case\r\n\r\n    const handleLoClick = () =>{\r\n        // console.log(\"Uppercase was click: \" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to Lower Case!','success');\r\n    }\r\n\r\n    // Clear Case\r\n\r\n    const handleClearClick = () =>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert('Text Cleared!', 'success');\r\n    }\r\n    \r\n    // Capitalize Case\r\n\r\n    const handleCapitalClick = () => {\r\n        let newText = text.split(\" \").map((currentValue) => {\r\n            let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\r\n            return newText;\r\n        });\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('Converted to Capatilize Case!','success');\r\n    }\r\n\r\n    // Copy Case\r\n\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert('Copied to Clipboard!', 'success');\r\n    }\r\n\r\n    // Extra Spaces Case\r\n\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('Removed Extra Spaces!', 'success');\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    \r\n    // Declare a new state variable, which we'll call \"count\"\r\n    const [text, setText] = useState(\"\");\r\n    // text = \"new text\" // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" style={{backgroundColor: props.mode === 'dark'?'grey':'white', color: props.mode === 'dark'?'white':'#042743'}} value={text} placeholder=\"Enter your text\" onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-sm btn-dark mx-1\" onClick={handleUpClick}>Upper Case</button>\r\n            <button className=\"btn btn-sm btn-dark mx-1\" onClick={handleLoClick}>Lower Case</button>\r\n            <button className=\"btn btn-sm btn-dark mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-sm btn-dark mx-1\" onClick={handleCapitalClick}>Capatilized Case</button>\r\n            <button className=\"btn btn-sm btn-dark mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-sm btn-dark mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            \r\n        </div>\r\n\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'#042743'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.length>0?text.trimEnd().split(\" \").length:0} words and {text.length} character</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length > 0 ? text: \"Enter something in the textbox above to preview it\"}</p>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n   \r\n    const capatilize = (word)=>{\r\n           const lower = word.toLowerCase();\r\n           return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capatilize(props.alert.type)}</strong>: {props.alert.msg} \r\n             </div>\r\n        \r\n    )\r\n}\r\n","import './App.css';\n// import About from './component/About';\nimport Navbar from './component/Navbar';\nimport Textform from './component/Textform';\nimport React, { useState } from 'react'\nimport Alert from './component/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route  \n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //weather dark mode enable or not\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert('Dark mode has been enabled', 'success');\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is amazing';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled', 'success');\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  return (\n    <>\n      {/* <Navbar title='TextUtils' aboutText='About TextUtils'/> */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n        <Navbar title='TextUtils' mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n              <Textform showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n              {/* <About/> */}\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}